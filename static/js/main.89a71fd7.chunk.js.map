{"version":3,"sources":["components/TokenSearch.js","components/ChainSelect.js","config/constants/endpoints.js","actions/checkHoneypot.js","actions/checkVerified.js","GrayList.js","App.js","reportWebVitals.js","index.js"],"names":["Search","Input","TokenSearch","props","onStart","disabled","placeholder","allowClear","enterButton","size","onSearch","Option","Select","ChainSelect","onSelect","defaultValue","style","width","height","onChange","value","EXPLORER_ENDPOINTS","checkHoneypot","address","chain","a","console","log","fetch","res","status","notification","text","message","description","open","undefined","json","body","error","errormsg","data","checkVerified","endpoint","length","verified","graylist","Text","Typography","interpretations","verifiedMessage","true","false","doCheckHoneypot","doCheckVerified","isGraylisted","chainGraylist","lower","App","useState","setChain","loadingHoneypot","setLoadingHoneypot","loadingVerified","setLoadingVerified","setStatus","setVerified","tokenAddress_","then","s","chain_","className","direction","display","marginRight","flexGrow","title","bordered","backgroundColor","ExperimentOutlined","fontSize","marginBottom","color","code","marginTop","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.89a71fd7.chunk.js","sourcesContent":["import { Input } from \"antd\";\n\nconst { Search } = Input;\n\n// Masterchef input component that calls the injected onStart method with the masterchef address as parameter\nfunction TokenSearch(props) {\n  const { onStart, disabled } = props;\n  return (\n    <Search\n      placeholder=\"Enter Token Address\"\n      allowClear\n      enterButton=\"Start\"\n      size=\"large\"\n      onSearch={onStart}\n      disabled={disabled}\n    />\n  );\n}\n\nexport default TokenSearch;\n","import { Select } from 'antd';\n\nconst { Option } = Select;\n\nfunction ChainSelect(props) {\n    const { onSelect, disabled } = props;\n    return <Select defaultValue=\"bsc\" style={{ width: \"100%\", height:\"100%\"}} onChange={onSelect} disabled={disabled}>\n        <Option value=\"bsc\">Binance Smart Chain</Option>\n        <Option value=\"poly\">Polygon</Option>\n        <Option value=\"avax\">Avalanche</Option>\n        <Option value=\"eth\">Ethereum</Option>\n    \n    </Select>\n\n}\n\nexport default ChainSelect;","export const HONEYPOT_API_ENDPOINT=\"https://honeypot.api.rugdoc.io/api/honeypotStatus.js\"\n\n\nexport const EXPLORER_ENDPOINTS = {\n    \"poly\": \"https://api.polygonscan.com\",\n    \"bsc\": \"https://api.bscscan.com\",\n    \"eth\": \"https://api.etherscan.com\",\n    \"avax\": \"https://cchain.explorer.avax.network/\",\n}","import { notification } from \"antd\"\nimport { HONEYPOT_API_ENDPOINT } from \"../config/constants/endpoints\"\n\nconst checkHoneypot = () => {\n    return async (address, chain) => {\n        try {\n            console.log(chain)\n            const res =await fetch(`${HONEYPOT_API_ENDPOINT}?address=${address}&chain=${chain}`)\n            if (res.status !== 200) {\n                notification.open({\n                    message: `Check failed with status ${res.status}`,\n                    description: await res.text()\n                })\n                return undefined\n            }\n            const body = await res.json()\n            return body['status']\n        } catch (e) {\n            console.error(e)\n            let errormsg = e.data\n            notification.open({\n                message: 'Check failed',\n                description: errormsg\n            })\n            return undefined\n        }\n    }\n}\nexport default checkHoneypot","import { notification } from \"antd\"\nimport { EXPLORER_ENDPOINTS } from \"../config/constants/endpoints\"\n\nconst checkVerified = () => {\n    return async (address, chain) => {\n        try {\n            const endpoint = EXPLORER_ENDPOINTS[chain];\n            const res =await fetch(`${endpoint}/api?module=contract&action=getsourcecode&address=${address}`)\n    \n            console.log(res)\n            if (res.status !== 200) {\n                notification.open({\n                    message: `Contract verification fetch failed (error ${res.status})`,\n                    description: await res.text()\n                })\n                return undefined\n            }\n            const body = await res.json()\n            if (body['status'] !== \"1\") {\n                notification.open({\n                    message: `Contract verification fetch failed (error ${body['status']})`,\n                    description: `${body['message']}`\n                })\n                return undefined\n            }\n            if (body['result'].length === 0) {\n                return false\n            }\n            let verified = true\n            for (let el of body['result']){\n                if (el['SourceCode'] === \"\") {\n                    verified = false;\n                }\n            }\n            return verified;\n        } catch (e) {\n            console.error(e)\n            let errormsg = e.data\n            notification.open({\n                message: 'Check failed',\n                description: errormsg\n            })\n            return undefined\n        }\n    }\n}\nexport default checkVerified","// The graylist is a list of contracts we know our honeypot checker does not work on\nconst graylist = {\n    \"bsc\": {\n        \"0xb16d8c2a78f2acd75a63b37e8ce6bccbbd8d8f9e\": true,\n    }\n}\nexport default graylist;","import \"./App.css\";\nimport { Card, Space, Spin, Typography } from 'antd';\nimport TokenSearch from \"./components/TokenSearch\";\nimport { useState } from \"react\";\nimport ChainSelect from \"./components/ChainSelect\";\nimport { ExperimentOutlined } from '@ant-design/icons';\nimport checkHoneypot from \"./actions/checkHoneypot\";\nimport checkVerified from \"./actions/checkVerified\";\n\nimport graylist from \"./GrayList\";\n\nconst { Text } = Typography;\nconst interpretations = {\n  \"UNKNOWN\": <span>The status of this token is unknown. This is usually a system error but could also be a bad sign for the token. Be careful.</span>, // 0, unknown\n  \"OK\": <span><b>✅ Honeypot tests passed</b>. Our program was able to buy and sell it succesfully. This however does not guarantee that it is not a honeypot.</span>, // 1, no issues\n  \"NO_PAIRS\": <span>⚠️ Could not find any trading pair for this token on the default router and could thus not test it.</span>, // 2, no pairs found\n  \"SEVERE_FEE\": <span>⚠️ A <b>severely high trading fee</b> (over 50%) was detected when selling or buying this token.</span>, //  3, fee > 50%\n  \"HIGH_FEE\": <span>⚠️ A <b>high trading fee</b> (Between 20% and 50%) was detected when selling or buying this token. Our system was however able to sell the token again.</span>, //  4, fee > 20%\n  \"MEDIUM_FEE\": <span>⚠️ A <b>trading fee of over 10%</b> but less then 20% was detected when selling or buying this token. Our system was however able to sell the token again.</span>, // 5, fee > 10%\n  \"APPROVE_FAILED\": <span>🚨 Failed to approve the token. This is very likely a <b>honeypot</b>.</span>, // 6, approval failed\n  \"SWAP_FAILED\": <span>🚨 Failed to sell the token. This is very likely a <b>honeypot</b>.</span> // 7, swap failed\n}\n\nconst verifiedMessage = {\n  true: <span>The contract is verified</span>,\n  false: <span>🚨 The contract is <b>not verified</b>. This is usually a very bad sign.</span>\n}\n\nconst doCheckHoneypot = checkHoneypot();\nconst doCheckVerified = checkVerified();\n\n\nfunction App() {\n  const [chain, setChain] = useState(\"bsc\");\n\n  const [loadingHoneypot, setLoadingHoneypot] = useState(false);\n  const [loadingVerified, setLoadingVerified] = useState(false);\n  const [status, setStatus] = useState(undefined);\n  const [verified, setVerified] = useState(undefined);\n\n  const onStart = async (tokenAddress_) => {\n    if (\n      tokenAddress_ === undefined ||\n      chain === undefined || loadingVerified || loadingHoneypot) {\n      return;\n    }\n    \n    if (chain !== \"avax\") {\n      setLoadingVerified(true);\n      doCheckVerified(tokenAddress_, chain).then(s => {\n        setVerified(s);\n        setLoadingVerified(false);\n      });\n    }\n\n    if(isGraylisted(chain, tokenAddress_)) {\n      setStatus(\"UNKNOWN\");\n      return;\n    }\n\n    setLoadingHoneypot(true);\n    doCheckHoneypot(tokenAddress_, chain).then(s => {\n      setStatus(s);\n      setLoadingHoneypot(false);\n    });\n  };\n\n  const onSelect = async (chain_) => {\n    console.log(chain_);\n    setChain(chain_)\n  };\n\n  return (\n\n    <div className=\"App\">\n      <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n        <div style={{ display: \"flex\" }}>\n          <div style={{ width: \"180px\", marginRight: \"5px\" }}>\n            <ChainSelect onSelect={onSelect} disabled={loadingHoneypot || loadingVerified} />\n          </div>\n          <div style={{ flexGrow: 1 }}>\n            <TokenSearch onStart={onStart} disabled={loadingHoneypot || loadingVerified} />\n          </div>\n        </div>\n        <Card title=\"Token status\" bordered={false} style={{ width: \"100%\", backgroundColor: \"transparent\" }}>\n          <ExperimentOutlined style={{ fontSize: 70, marginBottom: \"40px\", color: '#6d84a2' }} />\n          {loadingHoneypot || loadingVerified ? <div><Spin /></div> : <></>}\n          {status === undefined ?\n            <div style={{ color: '#6d84a2' }}>\n              <p>Please select a token and chain to get started...</p>\n              <p></p>\n              <p>This is an experimental service, use at your own risk and make sure to double check all contract interactions.</p>\n            </div>\n            :\n            <div>\n              <Text code style={{ fontSize: \"16px\" }}>{interpretations[status]}</Text>\n            </div>\n          }\n          {verified === undefined ? <></> : <div style={{ marginTop: \"10px\" }}>\n            <Text code style={{ fontSize: \"16px\" }}>{verifiedMessage[verified]}</Text>\n          </div>}\n        </Card>\n      </Space>\n    </div>\n  );\n}\n\nfunction isGraylisted(chain, address) {\n  if (!(chain in graylist))\n    return false;\n  const chainGraylist = graylist[chain];\n  if(!(address.lower() in chainGraylist))\n    return false;\n  return chainGraylist[address.lower()];\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}